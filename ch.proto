syntax = "proto2";

package apollo.canbus;

// Coolhigh vehicle starts from here coolhigh车辆从这里开始
message Control_command_115 {
// Control Message
//定义控制指令115消息类型
  enum Ctrl_cmdType {
    //通过添加枚举（enum)来定义Ctrl_cmdType类型，并为每个可能出现的值（CTRL_CMD_OUT_OF_CONTROL，CTRL_CMD_UNDER_CONTROL）定义常量
    //Ctrl_cmdType字段里的常量的标识号从0开始。
    CTRL_CMD_OUT_OF_CONTROL = 0; //不控制
    CTRL_CMD_UNDER_CONTROL = 1;//在控制下
  }
  // Take control(Command) [] [0|1]
  optional Ctrl_cmdType ctrl_cmd = 1;//optional 数据类型 字段名=1；
}

message Gear_command_114 {
// Control Message
//定义换挡指令114消息类型
  enum Gear_cmdType {
    //同上，通过enum定义Gear_cmdType类型，并为每个可能出现的值定义常量
    GEAR_CMD_PARK = 1; //停车
    GEAR_CMD_REVERSE = 2; //倒挡
    GEAR_CMD_NEUTRAL = 3; //空挡
    GEAR_CMD_DRIVE = 4; //行车
  }
  // PRND control(Command) [] [1|4]
  //停车、倒挡、空挡、行车指令：1~4
  optional Gear_cmdType gear_cmd = 1; //optional 数据类型 字段名=1；
}

message Brake_command_111 {
// Control Message
//定义刹车指令111的消息类型
  enum Brake_pedal_en_ctrlType {
    //同上，通过enum定义Brake_pedal_en_ctrlType类型，并为每个可能出现的值定义常量
    //pedal：踏板
    BRAKE_PEDAL_EN_CTRL_DISABLE = 0; //禁用刹车
    BRAKE_PEDAL_EN_CTRL_ENABLE = 1; //工作
  }
  // brake pedal enable bit(Command) [] [0|1]
  //制动踏板启用位（命令）：0~1
  optional Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  // Percentage of brake pedal(Command) [%] [0|100]
  //制动踏板的百分比：0~100%
  optional int32 brake_pedal_cmd = 2;
}

message Throttle_command_110 {
// Control Message
//定义节气门指令110的消息类型
  enum Throttle_pedal_en_ctrlType {
    //同上，通过enum定义Throttle_pedal_en_ctrlType类型，并为每个可能出现的值定义常量
    THROTTLE_PEDAL_EN_CTRL_DISABLE = 0; //禁用节气门
    THROTTLE_PEDAL_EN_CTRL_ENABLE = 1; //工作
  }
  // throttle pedal enable bit(Command) [] [0|1]
  //节气门踏板启用位（命令）：0~1
  optional Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  // Percentage of throttle pedal(Command) [%] [0|100]
  //节气门踏板百分比：0~100%
  optional int32 throttle_pedal_cmd = 2;
}

message Turnsignal_command_113 {
// Control Message
//定义转向灯光信号指令113的消息类型
  enum Turn_signal_cmdType {
    //同上，通过enum定义Turnsignal_command_113类型，并为每个可能出现的值定义常量
    TURN_SIGNAL_CMD_NONE = 0; //没有转向信号
    TURN_SIGNAL_CMD_LEFT = 1; //左转
    TURN_SIGNAL_CMD_RIGHT = 2; //右转
  }
  // Lighting control(Command) [] [0|2]
  //灯光控制命令：0~2
  optional Turn_signal_cmdType turn_signal_cmd = 1;
}

message Steer_command_112 {
// Control Message
//定义转向指令112的消息类型
  enum Steer_angle_en_ctrlType {
    //同上，通过enum定义Steer_angle_en_ctrlType类型，并为每个可能出现的值定义常量
    STEER_ANGLE_EN_CTRL_DISABLE = 0; //禁用转向
    STEER_ANGLE_EN_CTRL_ENABLE = 1; //在转向
  }
  // steering angle enable bit(Command) [] [0|1]
  //转向启用位（命令）：0~1
  optional Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  // Current steering angle(Command) [radian] [-0.524|0.524]
  //当前转向角命令：-0.524~0.524 单位：弧度  大约在-30°~30°
  optional double steer_angle_cmd = 2;
}

message Brake_status__511 {
// Report Message
//定义用来报告刹车状态的511消息类型
  enum Brake_pedal_en_stsType {
    //同上，通过enum定义Brake_pedal_en_stsType刹车踏板状态类型，并为每个可能出现的值定义常量
    BRAKE_PEDAL_EN_STS_DISABLE = 0; //刹车禁用中
    BRAKE_PEDAL_EN_STS_ENABLE = 1; //刹车可以正常工作
    BRAKE_PEDAL_EN_STS_TAKEOVER = 2; //刹车接管中（正在刹车）
  }
  enum Brake_errType {
    //同上，通过enum定义Brake_errType制动错误类型，并为每个可能出现的值定义常量
    BRAKE_ERR_NOERR = 0; //刹车没有出现错误
    BRAKE_ERR_BRAKE_SYSTEM_ERR = 1; //制动系统错误
  }
  enum Emergency_btn_envType {
    //同上，通过enum定义Emergency_btn_envType紧急按钮类型，并为每个可能出现的值定义常量
    EMERGENCY_BTN_ENV_NOENV = 0; //不可以用紧急按钮
    EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV = 1; //可以用紧急按钮
  }
  enum Front_bump_envType {
    //同上，通过enum定义Fron_bump_enType酷黑车前保险杠类型，并为每个可能出现的值定义常量
    FRONT_BUMP_ENV_NOENV = 0; //前保险杠失效
    FRONT_BUMP_ENV_FRONT_BUMPER_ENV = 1; //前保险杠可以使用
  }
  enum Back_bump_envType {
    //同上，通过enum定义Back_bump_envType酷黑车后保险杠类型，并为每个可能出现的值定义常量
    BACK_BUMP_ENV_NOENV = 0; //后保险杠失效
    BACK_BUMP_ENV_BACK_BUMPER_ENV = 1; //后保险杠可以使用
  }
  enum Overspd_envType {
    //同上，通过enum定义Overspd_envType超速类型，并为每个可能出现的值定义常量
    OVERSPD_ENV_NOENV = 0; //超速保护机制失效
    OVERSPD_ENV_OVERSPEED_ENV = 1; //超速保护机制可以使用
  }
  // brake pedal enable bit(Status) [] [0|1]
  //制动踏板状态启用位：0~1
  optional Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  // Percentage of brake pedal(Status) [%] [0|100]
  //制动踏板的百分数（状态）：0~100%
  optional int32 brake_pedal_sts = 2;
  // [] [0|1]
  //制动错误状态类型：0~1
  optional Brake_errType brake_err = 3;
  // [] [0|1]
  //紧急摁钮状态类型：0~1
  optional Emergency_btn_envType emergency_btn_env = 4;
  // [] [0|1]
  //前保险杠状态类型：0~1
  optional Front_bump_envType front_bump_env = 5;
  // [] [0|1]
  //后保险杠状态类型：0~1
  optional Back_bump_envType back_bump_env = 6;
  // [] [0|1]
  //超速保护机制状态类型：0~1
  optional Overspd_envType overspd_env = 7;
}

message Throttle_status__510 {
// Report Message
//定义用来报告节气门状态510的消息类型
  enum Throttle_pedal_en_stsType {
    //同上，通过enum定义Throttle_pedal_en_stsType节气门踏板状态类型，并对每一个可能出现的值定义常量
    THROTTLE_PEDAL_EN_STS_DISABLE = 0; //节气门踏板禁用状态
    THROTTLE_PEDAL_EN_STS_ENABLE = 1; //节气门踏板可以使用状态
    THROTTLE_PEDAL_EN_STS_TAKEOVER = 2; //节气门踏板接管状态（正在加油门）
  }
  enum Drive_motor_errType {
    //同上，通过enum定义Drive_motor_errType行驶电机错误状态类型，并对每一个可能出现的值定义常量
    DRIVE_MOTOR_ERR_NOERR = 0; //电机没有错误
    DRIVE_MOTOR_ERR_DRV_MOTOR_ERR = 1; //电机有错误状态
  }
  enum Battery_bms_errType {
    //同上，通过enum定义Battery_bms_errType电池错误状态类型，并对每一个可能出现的值定义常量
    BATTERY_BMS_ERR_NOERR = 0; //电池没有错误
    BATTERY_BMS_ERR_BATTERY_ERR = 1; //电池有错误状态
  }
  // throttle pedal enable bit(Status) [] [0|1]
  //节气门踏板使用状态：0~1
  optional Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  // Percentage of throttle pedal(Status) [%] [0|100]
  //节气门踏板（状态）的百分比：0~100%
  optional int32 throttle_pedal_sts = 2;
  // [] [0|1]
  //电机错误状态类型：0~1
  optional Drive_motor_errType drive_motor_err = 3;
  // [] [0|1]
  //电池错误状态类型：0~1
  optional Battery_bms_errType battery_bms_err = 4;
}

message Turnsignal_status__513 {
// Report Message
//定义用来报告转向信号灯状态513的消息类型
  enum Turn_signal_stsType {
    //同上，通过enum定义Turn_signal_stsType转向信号灯状态类型，并对每一个可能的值定义常量
    TURN_SIGNAL_STS_NONE = 0; //没有转向信号灯状态
    TURN_SIGNAL_STS_LEFT = 1; //左转向信号灯状态
    TURN_SIGNAL_STS_RIGHT = 2; //右转向信号灯状态
  }
  // Lighting control(Status) [] [0|2]
  //信号灯控制（状态）：0~2
  optional Turn_signal_stsType turn_signal_sts = 1;
}

message Steer_status__512 {
// Report Message
//定义用来报告转向状态512的消息类型
  enum Steer_angle_en_stsType {
    //同上，通过enum定义Steer_angle_en_stsType转向角度状态类型，并对每一个可能的值定义常量
    STEER_ANGLE_EN_STS_DISABLE = 0; //转向禁用状态
    STEER_ANGLE_EN_STS_ENABLE = 1; //可以转向状态
    STEER_ANGLE_EN_STS_TAKEOVER = 2; //转向接管状态（正在转向）
  }
  enum Steer_errType {
    //同上，通过enum定义Steer_errType转向误差状态类型，并对每一个可能的值定义常量
    STEER_ERR_NOERR = 0; //没有转向误差状态
    STEER_ERR_STEER_MOTOR_ERR = 1; //有转向误差状态
  }
  enum Sensor_errType {
    //同上，通过enum定义Sensor_errType传感器误差状态类型，并对每一个可能的值定义常量
    SENSOR_ERR_NOERR = 0; //传感器没有误差的状态
    SENSOR_ERR_STEER_SENSOR_ERR = 1; //传感器有误差的状态
  }
  // steering angle enable bit(Status) [] [0|1]
  //转向角度启用位（状态）：0~1
  optional Steer_angle_en_stsType steer_angle_en_sts = 1;
  // Current steering angle(Status) [radian] [-0.524|0.524]
  //当前转向角（状态）：-0.524~0.524, 单位：弧度  大约在-30°~30°
  optional double steer_angle_sts = 2;
  // [] [0|1]
  //转向误差状态
  optional Steer_errType steer_err = 3;
  // [] [0|1]
  //传感器误差状态
  optional Sensor_errType sensor_err = 4;
}

message Ecu_status_1_515 {
// Report Message
//定义用来报告ECU状态1_515的消息类型
  enum Ctrl_stsType {
    //同上，通过enum定义Ctrl_stsType ECU转向状态类型，并对每一个可能的值定义常量
    CTRL_STS_OUT_OF_CONTROL = 0; //没有在控制状态
    CTRL_STS_UNDER_CONTROL = 1; //在控制状态
  }
  // Current speed (Steering status) [m/s] [0|0]
  //当前速度（转向状态时），单位m/s
  optional double speed = 1;
  // Current acceleration (Steering status) [m/s^2] [0|0]
  //当前加速度（转向状态时），单位m/s^2
  optional double acc_speed = 2;
  // Current Auto-mode state (Chassis status) [] [0|1]
  //当前自动模式状态（底盘状态）：0~1  通过ECU状态类型
  optional Ctrl_stsType ctrl_sts = 3;
  // Current chassis state (Chassis status) [] [0|255]
  //当前底盘状态（底盘状态）：0~255
  optional int32 chassis_sts = 4;
  // Chassis error code (Chassis status) [] [0|65535]
  //底盘错误码（底盘状态）：0~65535
  optional int32 chassis_err = 5;
}

message Gear_status_514 {
// Report Message
//定义用来报告Gear_status 514换挡状态的消息类型
  enum Gear_stsType {
    //同上，通过enum定义Gear_stsType换挡状态类型，并对每个可能的值定义常量
    GEAR_STS_PARK = 1; //停车
    GEAR_STS_REVERSE = 2; //倒车
    GEAR_STS_NEUTRAL = 3; //空挡
    GEAR_STS_DRIVE = 4; //行车
  }
  // PRND control(Status) [] [1|4]
  //停车、倒车、空挡、行车控制（状态）：1~4
  optional Gear_stsType gear_sts = 1;
}

message Ecu_status_3_517 {
// Report Message
//定义用来报告Ecu_status 3_517 ECU超声波状态的消息类型
  // Ultrasonic detection distance 1 (Ultrasound status) [cm] [0|0]
  //超声波探测距离1（超声波状态）  单位：cm
  optional int32 ultrasound_dist_1 = 1;
  // Ultrasonic detection distance 2 (Ultrasound status) [cm] [0|0]
  //超声波探测距离2（超声波状态）  单位：cm
  optional int32 ultrasound_dist_2 = 2;
  // Ultrasonic detection distance 3 (Ultrasound status) [cm] [0|0]
  //超声波探测距离3（超声波状态）  单位：cm
  optional int32 ultrasound_dist_3 = 3;
  // Ultrasonic detection distance 4 (Ultrasound status) [cm] [0|0]
  //超声波探测距离4（超声波状态）  单位：cm
  optional int32 ultrasound_dist_4 = 4;
  // Ultrasonic detection distance 5 (Ultrasound status) [cm] [0|0]
  //超声波探测距离5（超声波状态）  单位：cm
  optional int32 ultrasound_dist_5 = 5;
  // Ultrasonic detection distance 6 (Ultrasound status) [cm] [0|0]
  //超声波探测距离6（超声波状态）  单位：cm
  optional int32 ultrasound_dist_6 = 6;
  // Ultrasonic detection distance 7 (Ultrasound status) [cm] [0|0]
  //超声波探测距离7（超声波状态）  单位：cm
  optional int32 ultrasound_dist_7 = 7;
  // Ultrasonic detection distance 8 (Ultrasound status) [cm] [0|0]
  //超声波探测距离8（超声波状态）  单位：cm
  optional int32 ultrasound_dist_8 = 8;
}

message Ecu_status_2_516 {
// Report Message
//定义用来报告Ecu_status 2_516 ECU电池状态的消息类型
  // Percentage of battery remaining (BMS status) [%] [0|100]
  //电池剩余电量百分比：0~100%
  optional int32 battery_remaining_capacity = 1;
  // Current battery voltage (BMS status) [V] [0|80]
  //当前电池电压：0~80V
  optional double battery_voltage = 2;
  // Current battery current (BMS status) [A] [-60|60]
  //当前电池电流：-60~60A
  optional double battery_current = 3;
  // Current battery temperature (BMS status) [¡É] [-40|110]
  //当前电池温度：-40~110
  optional int32 battery_temperature = 4;
}

message Ch {
  //ch的消息类型，同前面单独定义一样
  optional Control_command_115 control_command_115 = 1; // control message 控制指令
  optional Gear_command_114 gear_command_114 = 2; // control message  换挡指令
  optional Brake_command_111 brake_command_111 = 3; // control message 刹车指令
  optional Throttle_command_110 throttle_command_110 = 4; // control message 节气门指令
  optional Turnsignal_command_113 turnsignal_command_113 = 5; // control message 转向信号灯指令
  optional Steer_command_112 steer_command_112 = 6; // control message 转向指令
  optional Brake_status__511 brake_status__511 = 7; // report message 刹车状态
  optional Throttle_status__510 throttle_status__510 = 8; // report message 节气门状态
  optional Turnsignal_status__513 turnsignal_status__513 = 9; // report message 转向信号灯状态
  optional Steer_status__512 steer_status__512 = 10; // report message 转向状态
  optional Ecu_status_1_515 ecu_status_1_515 = 11; // report message ECU转向状态
  optional Gear_status_514 gear_status_514 = 12; // report message 换挡状态
  optional Ecu_status_3_517 ecu_status_3_517 = 13; // report message ECU超声波状态
  optional Ecu_status_2_516 ecu_status_2_516 = 14; // report message ECU电池状态
}
