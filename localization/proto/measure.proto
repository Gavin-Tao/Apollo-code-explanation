syntax = "proto2";

package apollo.localization;

import "modules/common/proto/header.proto";
import "modules/common/proto/geometry.proto";

message IntegMeasure {
  optional apollo.common.Header header = 1;

  enum MeasureType {
    // the measure data only include gnss position
    GNSS_POS_ONLY = 0; //测量数据仅包括gnss位置
    // the measure data include gnss position and velocity
    GNSS_POS_VEL = 1; //测量数据包括gnss位置和速度
    // the measure data include gnss position
    GNSS_POS_XY = 2; //测量数据包括gnss位置
    // the measure data only include gnss velocity
    GNSS_VEL_ONLY = 3; //测量数据只包括gnss速度
    // the measure data only include point cloud position
    POINT_CLOUD_POS = 4; //测量数据只包括点云位置
    // the measure data only include odometer velocity
    ODOMETER_VEL_ONLY = 5; //测量数据只包括里程计速度
    // trigger measure update using vehicle constraint
    VEHICLE_CONSTRAINT = 6;  //使用车辆约束条件触发措施更新
  }

  optional MeasureType measure_type = 2; //测量数据的类型

  enum FrameType {
    // Position give the longitude and latitude unit:rad.
    ENU = 0; //位置给出经度和纬度  单位：rad。
    // Position give x y and z from earth center.
    ECEF = 1; //从地球中心给出x y和z。
    // Position give x y and z in utm frame.
    UTM = 2; //给出在utm坐标系下的x y和z
    ODOMETER = 3;
  }
  optional FrameType frame_type = 3; //坐标系类型

  // Position measurement from GNSS or Lidar.
  optional apollo.common.Point3D position = 4; //GNSS或激光雷达的位置测量。

  // Velocity measurement from GNSS or odometer.
  optional apollo.common.Point3D velocity = 5; //GNSS或激光雷达的速度测量。

  optional double yaw = 6; //偏航角

  // Utm zone id.
  optional int32 zone_id = 7; //UTM区域ID。

  // Whether the measurement contains variance.
  optional bool is_have_variance = 8; //测量中是否包含方差。

  // Whether use double antenna gnss to get yaw measurement.
  optional bool is_gnss_double_antenna = 9; //是否使用双天线gnss进行偏航测量。

  // Covariance matrix of measurement.
  repeated double measure_covar = 10 [packed = true]; //测量的协方差矩阵。 true
}